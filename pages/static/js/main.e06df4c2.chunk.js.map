{"version":3,"sources":["store/index.ts","store/Counter.ts","components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Counter.tsx","App.tsx","index.tsx","store/configureStore.ts"],"names":["reducers","counter","state","incomingAction","undefined","count","type","NavMenu","props","useState","isOpen","setIsOpen","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","_","Collapse","navbar","NavItem","NavLink","Layout","children","connect","increment","decrement","aria-live","exact","path","component","Home","Counter","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","window","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById"],"mappings":"2QAUaA,EAAW,CACpBC,QCsB0C,SAACC,EAAiCC,GAC5E,QAAcC,IAAVF,EACA,MAAO,CAAEG,MAAO,GAIpB,OADeF,EACAG,MACX,IAAK,kBACD,MAAO,CAAED,MAAOH,EAAMG,MAAQ,GAClC,IAAK,kBACD,MAAO,CAAEA,MAAOH,EAAMG,MAAQ,GAClC,QACI,OAAOH,K,yFCXJK,G,MAzBC,SAACC,GAAkB,IAAD,EACFC,mBAASD,EAAME,QADb,mBACvBA,EADuB,KACfC,EADe,KAG9B,OACI,gCACI,kBAACC,EAAA,EAAD,CAAQC,UAAU,sEAAsEC,OAAK,GACzF,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,IAAKC,IAAMC,GAAG,KAA3B,WACA,kBAACC,EAAA,EAAD,CAAeC,QAAS,SAAAC,GAAC,OAAIX,GAAWD,IAASG,UAAU,SAC3D,kBAACU,EAAA,EAAD,CAAUV,UAAU,uCAAuCH,OAAQA,EAAQc,QAAM,GAC7E,wBAAIX,UAAU,wBACV,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,KAA7C,SAEJ,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,YAA7C,mBCLjBQ,EAXA,SAACnB,GACZ,OACI,gBAAC,WAAD,KACI,gBAAC,EAAD,MACA,gBAACO,EAAA,EAAD,KACKP,EAAMoB,YCERC,iBAZF,kBACX,2BACE,sCACA,kFACwD,2BADxD,iGAEgG,2BAFhG,qGAGoG,2BAHpG,0GCuBWA,eACX,SAAC3B,GAAD,OAA6BA,EAAMD,UJLT,CAC1B6B,UAAW,iBAAO,CAAExB,KAAM,oBAC1ByB,UAAW,iBAAO,CAAEzB,KAAM,qBIEfuB,EAlBC,SAACrB,GACb,OACI,gBAAC,WAAD,KACI,qCAEA,2EAEA,qBAAGwB,YAAU,UAAb,kBAAqC,8BAASxB,EAAMH,QAEpD,0BAAQC,KAAK,SACTO,UAAU,yBACVQ,QAAS,WAAQb,EAAMsB,cAF3B,iBCXG,G,MAAA,kBACX,gBAAC,EAAD,KACI,gBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,gBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,OCHpCC,EAAUC,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,QAChEC,EAAUC,YAAqB,CAAEC,SAAUN,IAG3CO,ECPS,SAAwBH,EAAkBI,GACrD,IAAMC,EAAa,CACfC,IACAC,YAAiBP,IAGfQ,EAAcC,YAAgB,2BAC7BnD,GAD4B,IAE/BoD,OAAQC,YAAcX,MAGpBY,EAAY,GACZC,EAAoC,qBAAXC,OAAyB,KAAOA,OAK/D,OAJID,GAAmBA,EAAgBE,8BACnCH,EAAUI,KAAKH,EAAgBE,gCAG5BE,YACHT,EACAJ,EACAc,IAAO,WAAP,GAAQC,IAAe,WAAf,EAAmBd,IAA3B,OAA2CO,KDbrCQ,CAAepB,GAE7BqB,SACI,gBAAC,IAAD,CAAUlB,MAAOA,GACb,gBAAC,IAAD,CAAiBH,QAASA,GACtB,gBAACsB,EAAD,QAGRzB,SAAS0B,eAAe,W","file":"static/js/main.e06df4c2.chunk.js","sourcesContent":["import * as Counter from './Counter';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    counter: Counter.CounterState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    counter: Counter.reducer,\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface CounterState {\r\n    count: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\r\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\r\n    if (state === undefined) {\r\n        return { count: 0 };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return { count: state.count + 1 };\r\n        case 'DECREMENT_COUNT':\r\n            return { count: state.count - 1 };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, {useState}  from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\ninterface Props{\r\n    isOpen?: boolean\r\n}\r\n\r\nconst NavMenu = (props: Props) => {\r\n    const [isOpen, setIsOpen] = useState(props.isOpen);\r\n\r\n    return (\r\n        <header>\r\n            <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\r\n                <Container>\r\n                    <NavbarBrand tag={Link} to=\"/\">Recipes</NavbarBrand>\r\n                    <NavbarToggler onClick={_ => setIsOpen(!isOpen)} className=\"mr-2\"/>\r\n                    <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={isOpen} navbar>\r\n                        <ul className=\"navbar-nav flex-grow\">\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                            </NavItem>\r\n                        </ul>\r\n                    </Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default NavMenu;\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\ninterface Props {\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst Layout = (props: Props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <NavMenu />\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Layout;","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Welcome!</h1>\r\n    <p>\r\n      My name is Simon and once in a while, i like to cook. <br/>\r\n      Since i have gotten serious about cooking over the last year, i decided to make this website. <br/>\r\n      The point is really only to store all the recipes i find which i like so i can remember them all. <br/>\r\n      Its also so i can add the few little twists and turns i do myself so i dont have to remember them.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default connect()(Home);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as CounterStore from '../store/Counter';\r\n\r\ntype CounterProps =\r\n    CounterStore.CounterState &\r\n    typeof CounterStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\nconst Counter = (props: CounterProps) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Counter</h1>\r\n\r\n            <p>This is a simple example of a React component.</p>\r\n\r\n            <p aria-live=\"polite\">Current count: <strong>{props.count}</strong></p>\r\n\r\n            <button type=\"button\"\r\n                className=\"btn btn-primary btn-lg\"\r\n                onClick={() => { props.increment(); }}>\r\n                Increment\r\n            </button>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.counter,\r\n    CounterStore.actionCreators\r\n)(Counter);\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Layout from './components/Layout';\r\nimport Home from './components/Home';\r\nimport Counter from './components/Counter';\r\n\r\nimport './custom.css'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n    </Layout>\r\n);\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}